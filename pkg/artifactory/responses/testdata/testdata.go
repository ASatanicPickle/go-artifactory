// Code generated by go-bindata.
// sources:
// error.json
// user.json
// user_detail.json
// users.json
// system_information.txt
// DO NOT EDIT!

package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _errorJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x4a\x2d\x2a\xca\x2f\x2a\x56\x52\xb0\x52\x88\x56\x00\x09\x28\x28\x28\x15\x97\x24\x96\x94\x82\x85\x4c\x0c\x4c\x74\x20\x62\xb9\xa9\xc5\xc5\x89\xe9\xa9\x20\x41\x25\xb7\xcc\x9c\x54\x85\xbc\xfc\x12\x85\xb4\xfc\xd2\xbc\x14\x3d\x25\x2e\x05\x85\x5a\x85\x58\xae\x5a\x40\x00\x00\x00\xff\xff\x57\xff\x2a\x7c\x50\x00\x00\x00")

func errorJsonBytes() ([]byte, error) {
	return bindataRead(
		_errorJson,
		"error.json",
	)
}

func errorJson() (*asset, error) {
	bytes, err := errorJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.json", size: 80, mode: os.FileMode(420), modTime: time.Unix(1519140976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\x31\x0a\x43\x21\x0c\x00\xd0\xfd\x9f\x22\x64\x2e\xc4\x51\x72\x9b\xa0\x16\x03\xb6\x4a\x12\x0b\x52\x7a\xf7\x0e\xed\xfa\x86\xf7\xbe\x00\x00\xf0\x29\x8f\x86\x0c\x58\xe5\xa5\xd5\xf1\xf6\xd3\x6d\x8a\xc0\x80\x3d\x62\x31\xd1\x98\x45\x46\x9f\x1e\x9c\x53\x4e\x24\x16\x7a\x97\x12\xd3\x0e\xc9\x52\xf2\x56\xb6\x69\x1c\xda\xde\xcc\xe9\x5f\x5d\x9f\x6f\x00\x00\x00\xff\xff\xec\xcc\xba\x76\x63\x00\x00\x00")

func userJsonBytes() ([]byte, error) {
	return bindataRead(
		_userJson,
		"user.json",
	)
}

func userJson() (*asset, error) {
	bytes, err := userJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user.json", size: 99, mode: os.FileMode(420), modTime: time.Unix(1519137630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _user_detailJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x3f\x4b\x04\x31\x10\xc5\xfb\xfb\x14\xc3\xd4\xde\xb1\x39\x56\x94\x54\x0a\x36\x07\x16\x16\x5e\xa3\x58\x8c\x9b\xb9\x25\x90\x3f\xcb\x4c\x0e\x0b\xf1\xbb\x4b\x92\x95\xc5\x26\xc5\xef\xfd\xc8\x7b\xf3\xbd\x03\xc0\x44\x91\x11\x2c\x20\xb9\xe8\x13\xde\x54\xc6\x91\x7c\xd8\xe0\x43\x7b\x0f\x53\x8e\x3d\x5e\x48\xf5\x2b\x8b\x6b\x86\xe6\xc8\x15\xf4\xa8\x7f\x02\x16\x8a\x5c\xb9\xcb\x92\x2f\x3e\xf0\x79\x71\x54\xe8\x33\xf0\xbf\xd0\x79\xad\xec\x7c\x7a\x9c\x26\x56\x45\x0b\x17\x0a\xda\x33\x9f\x0a\x4b\xa2\xf0\xb2\xb6\x3d\x75\xb7\xb5\x6e\xd6\x2c\xf9\xba\x68\x65\xef\x6b\xbb\xd7\x22\x54\xb2\x28\xc2\x47\x53\x02\x69\x79\xce\xf3\xcc\xee\xd4\xa6\xe1\x71\x30\xb7\xfb\xe1\x7e\x6f\xcc\xab\x19\xed\x30\x5a\x63\x0e\xe3\xdd\xf1\xad\x9f\x20\x4c\x21\x36\xef\x6f\x01\xee\x7e\x7e\x03\x00\x00\xff\xff\xb7\x6f\xbd\xbb\x2b\x01\x00\x00")

func user_detailJsonBytes() ([]byte, error) {
	return bindataRead(
		_user_detailJson,
		"user_detail.json",
	)
}

func user_detailJson() (*asset, error) {
	bytes, err := user_detailJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "user_detail.json", size: 299, mode: os.FileMode(420), modTime: time.Unix(1519137655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _usersJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcd\x31\x0a\xc3\x30\x0c\x46\xe1\xdd\xa7\xf8\xd1\x1c\x50\xc6\xe0\xab\x94\x0e\xc2\x71\x89\xc1\xb5\x83\x24\x17\x42\xe9\xdd\x0b\x6d\xb7\xae\x59\xdf\xf0\xbe\x4b\x00\x9e\x01\x00\xa8\xc9\x3d\x53\x04\xad\xf2\x28\xab\xd1\xf4\xad\x43\x0b\x21\x82\x36\xf7\x3d\x32\xd7\x9e\xa4\x6e\xdd\x3c\x2e\xf3\x32\xb3\xa8\x97\x9b\x24\xef\x7a\xb0\xec\x85\x2d\xa7\xa1\xc5\x0f\x1e\x96\xd5\xf8\xb7\x0a\xc0\x6b\xfa\x67\x5a\x3d\x09\x69\xf5\x43\x84\xeb\x3b\x00\x00\xff\xff\x3d\x0d\xd6\x85\xce\x00\x00\x00")

func usersJsonBytes() ([]byte, error) {
	return bindataRead(
		_usersJson,
		"users.json",
	)
}

func usersJson() (*asset, error) {
	bytes, err := usersJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "users.json", size: 206, mode: os.FileMode(420), modTime: time.Unix(1519138011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _system_informationTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd4\x4f\x6f\x9b\x30\x18\x06\xf0\xbb\x3f\xc5\xfb\x05\x62\xfe\x19\x87\x1c\x7a\xa8\xba\x4d\x45\x1a\x69\xb5\x84\xc3\x4e\x93\x07\x0e\xf5\x04\x7e\x2b\xdb\x44\xc9\xc4\x87\x9f\x58\x2b\x4e\x61\xab\xe1\x3d\xa3\xdf\xfb\xf0\xd8\x32\x21\x70\xf8\x7e\x38\x7e\x2e\x20\xdf\x7f\x79\xfa\x56\xdc\x1f\xf3\xa7\x3d\x7c\x2a\x8b\x67\x02\x77\xb7\x87\x10\x28\xad\x34\x90\xeb\x13\xce\x7e\x74\x47\x00\xa0\xb7\xd2\xd0\x0a\x7b\xed\xcc\x15\x16\xcf\x00\xe5\x61\xd2\x6a\x65\x96\x4b\x6f\x5a\x30\x61\x2f\xd8\xc9\xb5\xd8\x59\x98\x00\x5f\x5d\xf0\xeb\x64\xb0\x09\x84\x71\xea\x24\x2a\x87\xe6\x3a\x6d\x69\x85\x6e\x7a\xd1\x2c\xdf\x34\x80\xd4\x93\xa6\xc5\xea\xcc\xb7\x42\x3a\xd5\xc9\xdf\xa8\xd7\x84\x2c\x8f\x0f\x84\xc0\x23\x5a\xf7\x81\xab\x71\x7f\x16\xaa\x15\x3f\x5b\x09\xcf\x06\x2b\x69\x2d\x1a\xbb\x64\x69\x36\x62\x8f\x52\xbc\x42\x21\x3b\x34\x57\x28\xad\x68\xe4\xe6\x01\xbb\x4e\x39\x59\xfb\x61\x09\x4b\xd2\xdd\x36\xc9\x12\x3e\xc3\xe6\x5a\x39\xff\x8c\xff\x65\x0b\x71\xf1\x55\x3f\xc2\x96\xd6\xaf\x80\x37\x96\xb1\x5d\xc6\xf8\x36\x89\xc3\x51\xdd\xa3\xde\xac\xaf\x77\x80\x38\xe2\x31\xcf\xb2\xf0\x1f\xa8\x6f\xb9\x03\xc4\x69\x9a\xee\x42\x36\x4f\xfa\x16\x3b\xc0\x26\x9a\xd7\x7c\xfb\x1c\xff\x3a\xca\x78\x12\x86\x7f\x0f\x08\x2d\x15\xa6\x7a\xf1\x0a\x74\x0b\x15\x5d\xcd\xd9\x3b\xb8\xfa\x35\x18\xc1\xaf\x4a\xf7\x97\x77\xf0\x2c\x8d\x55\xa8\xd7\x81\x09\x8d\x42\x1a\x6e\xd2\x88\xd1\x38\xa2\x11\x95\xed\x96\x5e\x32\xfe\x83\xb3\x25\xe9\x50\xd4\xb2\x26\x7f\x02\x00\x00\xff\xff\x5b\xfe\x92\x18\xa9\x06\x00\x00")

func system_informationTxtBytes() ([]byte, error) {
	return bindataRead(
		_system_informationTxt,
		"system_information.txt",
	)
}

func system_informationTxt() (*asset, error) {
	bytes, err := system_informationTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "system_information.txt", size: 1705, mode: os.FileMode(420), modTime: time.Unix(1519138635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"error.json": errorJson,
	"user.json": userJson,
	"user_detail.json": user_detailJson,
	"users.json": usersJson,
	"system_information.txt": system_informationTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"error.json": &bintree{errorJson, map[string]*bintree{}},
	"system_information.txt": &bintree{system_informationTxt, map[string]*bintree{}},
	"user.json": &bintree{userJson, map[string]*bintree{}},
	"user_detail.json": &bintree{user_detailJson, map[string]*bintree{}},
	"users.json": &bintree{usersJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

